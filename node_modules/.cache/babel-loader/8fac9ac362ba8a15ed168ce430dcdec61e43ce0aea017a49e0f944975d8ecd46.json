{"ast":null,"code":"var _jsxFileName = \"/Users/debkumarroy/gym-tracker mobile version/src/components/ProgressChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { Chart as ChartJS, LineElement, CategoryScale, LinearScale, PointElement, Tooltip, Legend } from \"chart.js\";\nimport { loadProgress } from \"../utils/localStorageHelper\";\n\n// Register chart components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(LineElement, CategoryScale, LinearScale, PointElement, Tooltip, Legend);\nconst ProgressChart = () => {\n  _s();\n  const [chartData, setChartData] = useState({\n    labels: [],\n    datasets: []\n  });\n  useEffect(() => {\n    const progressData = loadProgress().history || [];\n\n    // Group workouts by week and category\n    const categoryProgress = {};\n    const weekLabels = new Set();\n    progressData.forEach(entry => {\n      const [day, month, year] = entry.date.split(\"/\");\n      const weekKey = `${year}-W${Math.ceil(day / 7)}`; // Group by week\n      weekLabels.add(weekKey);\n      Object.keys(entry.exercises).forEach(exercise => {\n        const category = getCategory(exercise);\n        if (!categoryProgress[category]) {\n          categoryProgress[category] = {};\n        }\n        if (!categoryProgress[category][weekKey]) {\n          categoryProgress[category][weekKey] = {\n            reps: 0,\n            weight: 0,\n            count: 0\n          };\n        }\n        categoryProgress[category][weekKey].reps += parseInt(entry.exercises[exercise].reps || 0, 10);\n        categoryProgress[category][weekKey].weight += parseInt(entry.exercises[exercise].weight || 0, 10);\n        categoryProgress[category][weekKey].count += 1;\n      });\n    });\n\n    // Prepare dataset for each category\n    const datasets = Object.keys(categoryProgress).map(category => ({\n      label: category,\n      data: Object.values(categoryProgress[category]).map(data => data.count > 0 ? Math.round(data.weight / data.count) : 0),\n      // Average weight lifted per exercise\n      borderColor: getColor(category),\n      fill: false,\n      tension: 0.2\n    }));\n    setChartData({\n      labels: Array.from(weekLabels).sort(),\n      datasets: datasets\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"progress-chart\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uD83D\\uDCC8 Weekly Progress\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n\n// Helper function to categorize exercises\n_s(ProgressChart, \"ACtgFDDiZUUiVLrWikd26C2GBwE=\");\n_c = ProgressChart;\nconst getCategory = exercise => {\n  if (exercise.includes(\"Bench Press\") || exercise.includes(\"Tricep\")) return \"Chest & Triceps\";\n  if (exercise.includes(\"Shoulder\") || exercise.includes(\"Lat\") || exercise.includes(\"Pull\")) return \"Back & Shoulders\";\n  if (exercise.includes(\"Bicep\") || exercise.includes(\"Plank\") || exercise.includes(\"Crunches\")) return \"Cardio & Biceps\";\n  if (exercise.includes(\"Leg\") || exercise.includes(\"Squats\")) return \"Legs & Core\";\n  return \"Other\";\n};\n\n// Assign colors to categories\nconst getColor = category => {\n  const colors = {\n    \"Chest & Triceps\": \"rgba(255, 99, 132, 1)\",\n    \"Back & Shoulders\": \"rgba(54, 162, 235, 1)\",\n    \"Cardio & Biceps\": \"rgba(255, 206, 86, 1)\",\n    \"Legs & Core\": \"rgba(75, 192, 192, 1)\"\n  };\n  return colors[category] || \"rgba(153, 102, 255, 1)\";\n};\nexport default ProgressChart;\nvar _c;\n$RefreshReg$(_c, \"ProgressChart\");","map":{"version":3,"names":["React","useEffect","useState","Line","Chart","ChartJS","LineElement","CategoryScale","LinearScale","PointElement","Tooltip","Legend","loadProgress","jsxDEV","_jsxDEV","register","ProgressChart","_s","chartData","setChartData","labels","datasets","progressData","history","categoryProgress","weekLabels","Set","forEach","entry","day","month","year","date","split","weekKey","Math","ceil","add","Object","keys","exercises","exercise","category","getCategory","reps","weight","count","parseInt","map","label","data","values","round","borderColor","getColor","fill","tension","Array","from","sort","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","includes","colors","$RefreshReg$"],"sources":["/Users/debkumarroy/gym-tracker mobile version/src/components/ProgressChart.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { Chart as ChartJS, LineElement, CategoryScale, LinearScale, PointElement, Tooltip, Legend } from \"chart.js\";\nimport { loadProgress } from \"../utils/localStorageHelper\";\n\n// Register chart components\nChartJS.register(LineElement, CategoryScale, LinearScale, PointElement, Tooltip, Legend);\n\nconst ProgressChart = () => {\n  const [chartData, setChartData] = useState({\n    labels: [],\n    datasets: [],\n  });\n\n  useEffect(() => {\n    const progressData = loadProgress().history || [];\n\n    // Group workouts by week and category\n    const categoryProgress = {};\n    const weekLabels = new Set();\n\n    progressData.forEach((entry) => {\n      const [day, month, year] = entry.date.split(\"/\");\n      const weekKey = `${year}-W${Math.ceil(day / 7)}`; // Group by week\n      weekLabels.add(weekKey);\n\n      Object.keys(entry.exercises).forEach((exercise) => {\n        const category = getCategory(exercise);\n        if (!categoryProgress[category]) {\n          categoryProgress[category] = {};\n        }\n\n        if (!categoryProgress[category][weekKey]) {\n          categoryProgress[category][weekKey] = { reps: 0, weight: 0, count: 0 };\n        }\n\n        categoryProgress[category][weekKey].reps += parseInt(entry.exercises[exercise].reps || 0, 10);\n        categoryProgress[category][weekKey].weight += parseInt(entry.exercises[exercise].weight || 0, 10);\n        categoryProgress[category][weekKey].count += 1;\n      });\n    });\n\n    // Prepare dataset for each category\n    const datasets = Object.keys(categoryProgress).map((category) => ({\n      label: category,\n      data: Object.values(categoryProgress[category]).map((data) =>\n        data.count > 0 ? Math.round(data.weight / data.count) : 0\n      ), // Average weight lifted per exercise\n      borderColor: getColor(category),\n      fill: false,\n      tension: 0.2,\n    }));\n\n    setChartData({\n      labels: Array.from(weekLabels).sort(),\n      datasets: datasets,\n    });\n  }, []);\n\n  return (\n    <div className=\"progress-chart\">\n      <h2>ðŸ“ˆ Weekly Progress</h2>\n      <Line data={chartData} />\n    </div>\n  );\n};\n\n// Helper function to categorize exercises\nconst getCategory = (exercise) => {\n  if (exercise.includes(\"Bench Press\") || exercise.includes(\"Tricep\")) return \"Chest & Triceps\";\n  if (exercise.includes(\"Shoulder\") || exercise.includes(\"Lat\") || exercise.includes(\"Pull\")) return \"Back & Shoulders\";\n  if (exercise.includes(\"Bicep\") || exercise.includes(\"Plank\") || exercise.includes(\"Crunches\")) return \"Cardio & Biceps\";\n  if (exercise.includes(\"Leg\") || exercise.includes(\"Squats\")) return \"Legs & Core\";\n  return \"Other\";\n};\n\n// Assign colors to categories\nconst getColor = (category) => {\n  const colors = {\n    \"Chest & Triceps\": \"rgba(255, 99, 132, 1)\",\n    \"Back & Shoulders\": \"rgba(54, 162, 235, 1)\",\n    \"Cardio & Biceps\": \"rgba(255, 206, 86, 1)\",\n    \"Legs & Core\": \"rgba(75, 192, 192, 1)\",\n  };\n  return colors[category] || \"rgba(153, 102, 255, 1)\";\n};\n\nexport default ProgressChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}