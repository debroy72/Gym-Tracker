{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport WorkoutSelector from \"../components/WorkoutSelector\";\nimport WorkoutList from \"../components/WorkoutList\";\nimport WorkoutHistory from \"../components/WorkoutHistory\";\nimport { saveProgress, loadProgress } from \"../utils/localStorageHelper\";\nimport { motion } from \"framer-motion\";\nconst Dashboard = () => {\n  _s();\n  const [selectedWorkout, setSelectedWorkout] = useState(\"\");\n  const [workoutData, setWorkoutData] = useState({});\n  const [history, setHistory] = useState([]);\n  useEffect(() => {\n    const savedData = loadProgress();\n    if (selectedWorkout) {\n      setWorkoutData(savedData[selectedWorkout] || {});\n    }\n    setHistory(savedData.history || []);\n  }, [selectedWorkout]);\n  const updateExerciseData = (exercise, field, value) => {\n    setWorkoutData(prev => {\n      const updatedData = {\n        ...prev,\n        [exercise]: {\n          ...prev[exercise],\n          [field]: value\n        }\n      };\n      return updatedData;\n    });\n  };\n  const saveWorkout = () => {\n    setWorkoutData(prevWorkoutData => {\n      const date = new Date().toLocaleDateString();\n\n      // Ensure default values for reps and weight before saving\n      const cleanedExercises = {};\n      Object.keys(prevWorkoutData).forEach(exercise => {\n        var _prevWorkoutData$exer, _prevWorkoutData$exer2, _prevWorkoutData$exer3;\n        cleanedExercises[exercise] = {\n          completed: ((_prevWorkoutData$exer = prevWorkoutData[exercise]) === null || _prevWorkoutData$exer === void 0 ? void 0 : _prevWorkoutData$exer.completed) || false,\n          reps: (_prevWorkoutData$exer2 = prevWorkoutData[exercise]) !== null && _prevWorkoutData$exer2 !== void 0 && _prevWorkoutData$exer2.reps ? String(prevWorkoutData[exercise].reps) : \"0\",\n          weight: (_prevWorkoutData$exer3 = prevWorkoutData[exercise]) !== null && _prevWorkoutData$exer3 !== void 0 && _prevWorkoutData$exer3.weight ? String(prevWorkoutData[exercise].weight) : \"0\"\n        };\n      });\n\n      // Add new workout to history\n      const updatedHistory = [{\n        date,\n        workout: selectedWorkout,\n        exercises: cleanedExercises\n      }, ...history];\n\n      // Save updated history to LocalStorage\n      const allProgress = loadProgress();\n      allProgress.history = updatedHistory;\n      saveProgress(allProgress);\n\n      // Update state with the new history\n      setHistory(updatedHistory);\n      alert(\"Workout Saved! ðŸŽ‰\");\n      return prevWorkoutData; // Ensure no data is lost\n    });\n  };\n};\n_s(Dashboard, \"q76iE89UNt6WBDGGnySsUJ4igh8=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["useState","useEffect","WorkoutSelector","WorkoutList","WorkoutHistory","saveProgress","loadProgress","motion","Dashboard","_s","selectedWorkout","setSelectedWorkout","workoutData","setWorkoutData","history","setHistory","savedData","updateExerciseData","exercise","field","value","prev","updatedData","saveWorkout","prevWorkoutData","date","Date","toLocaleDateString","cleanedExercises","Object","keys","forEach","_prevWorkoutData$exer","_prevWorkoutData$exer2","_prevWorkoutData$exer3","completed","reps","String","weight","updatedHistory","workout","exercises","allProgress","alert","_c","$RefreshReg$"],"sources":["/Users/debkumarroy/gym-tracker/src/pages/Dashboard.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport WorkoutSelector from \"../components/WorkoutSelector\";\nimport WorkoutList from \"../components/WorkoutList\";\nimport WorkoutHistory from \"../components/WorkoutHistory\";\nimport { saveProgress, loadProgress } from \"../utils/localStorageHelper\";\nimport { motion } from \"framer-motion\";\n\nconst Dashboard = () => {\n  const [selectedWorkout, setSelectedWorkout] = useState(\"\");\n  const [workoutData, setWorkoutData] = useState({});\n  const [history, setHistory] = useState([]);\n\n  useEffect(() => {\n    const savedData = loadProgress();\n    if (selectedWorkout) {\n      setWorkoutData(savedData[selectedWorkout] || {});\n    }\n    setHistory(savedData.history || []);\n  }, [selectedWorkout]);\n\n  const updateExerciseData = (exercise, field, value) => {\n    setWorkoutData((prev) => {\n      const updatedData = {\n        ...prev,\n        [exercise]: { ...prev[exercise], [field]: value },\n      };\n      return updatedData;\n    });\n  };\n\n  const saveWorkout = () => {\n    setWorkoutData((prevWorkoutData) => {\n      const date = new Date().toLocaleDateString();\n  \n      // Ensure default values for reps and weight before saving\n      const cleanedExercises = {};\n      Object.keys(prevWorkoutData).forEach((exercise) => {\n        cleanedExercises[exercise] = {\n          completed: prevWorkoutData[exercise]?.completed || false,\n          reps: prevWorkoutData[exercise]?.reps ? String(prevWorkoutData[exercise].reps) : \"0\",\n          weight: prevWorkoutData[exercise]?.weight ? String(prevWorkoutData[exercise].weight) : \"0\",\n        };\n      });\n  \n      // Add new workout to history\n      const updatedHistory = [\n        { date, workout: selectedWorkout, exercises: cleanedExercises },\n        ...history,\n      ];\n  \n      // Save updated history to LocalStorage\n      const allProgress = loadProgress();\n      allProgress.history = updatedHistory;\n      saveProgress(allProgress);\n  \n      // Update state with the new history\n      setHistory(updatedHistory);\n  \n      alert(\"Workout Saved! ðŸŽ‰\");\n  \n      return prevWorkoutData; // Ensure no data is lost\n    });\n  };\n};\n\nexport default Dashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}