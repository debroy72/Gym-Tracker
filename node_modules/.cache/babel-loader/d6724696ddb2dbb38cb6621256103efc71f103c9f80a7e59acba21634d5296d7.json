{"ast":null,"code":"import _objectSpread from\"/Users/debkumarroy/gym-tracker mobile version/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{useState,useEffect}from\"react\";import WorkoutSelector from\"../components/WorkoutSelector\";import WorkoutList from\"../components/WorkoutList\";import WorkoutHistory from\"../components/WorkoutHistory\";import ProgressChart from\"../components/ProgressChart\";import{saveProgress,loadProgress}from\"../utils/localStorageHelper\";import{motion}from\"framer-motion\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Dashboard=_ref=>{let{onLogout}=_ref;const[selectedWorkout,setSelectedWorkout]=useState(\"\");const[workoutData,setWorkoutData]=useState({});const[history,setHistory]=useState([]);const[showProgress,setShowProgress]=useState(false);useEffect(()=>{const savedData=loadProgress();if(selectedWorkout){setWorkoutData(savedData[selectedWorkout]||{});}setHistory(savedData.history||[]);},[selectedWorkout]);const updateExerciseData=(exercise,field,value)=>{setWorkoutData(prev=>{const updatedData=_objectSpread(_objectSpread({},prev),{},{[exercise]:_objectSpread(_objectSpread({},prev[exercise]),{},{[field]:value!==\"\"?value.toString():\"0\"})});console.log(\"Updated Workout Data:\",updatedData);return updatedData;});};const saveWorkout=async()=>{const date=new Date().toLocaleDateString();console.log(\"🔹 Saving workout for date:\",date);const cleanedExercises={};const workoutEntries=Object.keys(workoutData).map(exercise=>{var _workoutData$exercise,_workoutData$exercise2,_workoutData$exercise3,_workoutData$exercise4;return{date,category:selectedWorkout,exercise,weight1:((_workoutData$exercise=workoutData[exercise])===null||_workoutData$exercise===void 0?void 0:_workoutData$exercise.weight1)||\"0\",weight2:((_workoutData$exercise2=workoutData[exercise])===null||_workoutData$exercise2===void 0?void 0:_workoutData$exercise2.weight2)||\"0\",weight3:((_workoutData$exercise3=workoutData[exercise])===null||_workoutData$exercise3===void 0?void 0:_workoutData$exercise3.weight3)||\"0\",completed:(_workoutData$exercise4=workoutData[exercise])!==null&&_workoutData$exercise4!==void 0&&_workoutData$exercise4.completed?\"✅\":\"❌\"};});console.log(\"🟡 Prepared Data Before Sending:\",workoutEntries);try{const response=await fetch(\"https://script.google.com/macros/s/AKfycbyFbClNXTKfyhBhxj-VnsGURQ5bJBG4ZzwjsaNkU7mMdceUWOG1YyLXWJgQWyKWNBz1pw/exec\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify(workoutEntries)});const responseData=await response.text();console.log(\"🟢 Google Sheets Response:\",responseData);}catch(error){console.error(\"❌ Error saving to Google Sheets:\",error);}workoutEntries.forEach(entry=>{cleanedExercises[entry.exercise]=entry;});console.log(\"🟡 Updated History before saving:\",cleanedExercises);const updatedHistory=[{date,workout:selectedWorkout,exercises:cleanedExercises},...history];const allProgress=loadProgress();allProgress.history=updatedHistory;saveProgress(allProgress);console.log(\"✅ Final History Saved to LocalStorage:\",updatedHistory);setHistory(updatedHistory);alert(\"Workout Saved & Synced to Google Sheets! 🎉\");};const resetProgress=()=>{if(window.confirm(\"Are you sure you want to reset all progress? This cannot be undone.\")){localStorage.clear();setHistory([]);setWorkoutData({});alert(\"All progress has been reset! 🗑️\");}};return/*#__PURE__*/_jsxs(motion.div,{className:\"dashboard\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"dashboard-header\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"\\uD83C\\uDFCB\\uFE0F\\u200D\\u2642\\uFE0F GYM WORKOUT TRACKER\"}),/*#__PURE__*/_jsx(\"button\",{className:\"logout-button\",onClick:onLogout,children:\"\\uD83D\\uDEAA Logout\"})]}),/*#__PURE__*/_jsx(WorkoutSelector,{selectedWorkout:selectedWorkout,setSelectedWorkout:setSelectedWorkout}),/*#__PURE__*/_jsx(WorkoutList,{selectedWorkout:selectedWorkout,workoutData:workoutData,updateExerciseData:updateExerciseData,saveWorkout:saveWorkout}),/*#__PURE__*/_jsx(WorkoutHistory,{history:history}),/*#__PURE__*/_jsx(\"button\",{className:\"progress-toggle\",onClick:()=>setShowProgress(!showProgress),children:showProgress?\"Hide Progress 📉\":\"Show Progress 📈\"}),showProgress&&/*#__PURE__*/_jsx(ProgressChart,{}),/*#__PURE__*/_jsx(\"button\",{className:\"reset-button\",onClick:resetProgress,children:\"Reset Progress \\uD83D\\uDDD1\\uFE0F\"})]});};export default Dashboard;","map":{"version":3,"names":["useState","useEffect","WorkoutSelector","WorkoutList","WorkoutHistory","ProgressChart","saveProgress","loadProgress","motion","jsx","_jsx","jsxs","_jsxs","Dashboard","_ref","onLogout","selectedWorkout","setSelectedWorkout","workoutData","setWorkoutData","history","setHistory","showProgress","setShowProgress","savedData","updateExerciseData","exercise","field","value","prev","updatedData","_objectSpread","toString","console","log","saveWorkout","date","Date","toLocaleDateString","cleanedExercises","workoutEntries","Object","keys","map","_workoutData$exercise","_workoutData$exercise2","_workoutData$exercise3","_workoutData$exercise4","category","weight1","weight2","weight3","completed","response","fetch","method","headers","body","JSON","stringify","responseData","text","error","forEach","entry","updatedHistory","workout","exercises","allProgress","alert","resetProgress","window","confirm","localStorage","clear","div","className","children","onClick"],"sources":["/Users/debkumarroy/gym-tracker mobile version/src/pages/Dashboard.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport WorkoutSelector from \"../components/WorkoutSelector\";\nimport WorkoutList from \"../components/WorkoutList\";\nimport WorkoutHistory from \"../components/WorkoutHistory\";\nimport ProgressChart from \"../components/ProgressChart\";\nimport { saveProgress, loadProgress } from \"../utils/localStorageHelper\";\nimport { motion } from \"framer-motion\";\n\nconst Dashboard = ({ onLogout }) => {\n  const [selectedWorkout, setSelectedWorkout] = useState(\"\");\n  const [workoutData, setWorkoutData] = useState({});\n  const [history, setHistory] = useState([]);\n  const [showProgress, setShowProgress] = useState(false);\n\n  useEffect(() => {\n    const savedData = loadProgress();\n    if (selectedWorkout) {\n      setWorkoutData(savedData[selectedWorkout] || {});\n    }\n    setHistory(savedData.history || []);\n  }, [selectedWorkout]);\n\n  const updateExerciseData = (exercise, field, value) => {\n    setWorkoutData((prev) => {\n      const updatedData = {\n        ...prev,\n        [exercise]: {\n          ...prev[exercise], \n          [field]: value !== \"\" ? value.toString() : \"0\",\n        },\n      };\n      \n      console.log(\"Updated Workout Data:\", updatedData);\n  \n      return updatedData;\n    });\n  };\n\n  const saveWorkout = async () => {\n    const date = new Date().toLocaleDateString();\n    console.log(\"🔹 Saving workout for date:\", date);\n\n    const cleanedExercises = {};\n    const workoutEntries = Object.keys(workoutData).map((exercise) => ({\n      date,\n      category: selectedWorkout,\n      exercise,\n      weight1: workoutData[exercise]?.weight1 || \"0\",\n      weight2: workoutData[exercise]?.weight2 || \"0\",\n      weight3: workoutData[exercise]?.weight3 || \"0\",\n      completed: workoutData[exercise]?.completed ? \"✅\" : \"❌\",\n    }));\n\n    console.log(\"🟡 Prepared Data Before Sending:\", workoutEntries);\n\n    try {\n      const response = await fetch(\n        \"https://script.google.com/macros/s/AKfycbyFbClNXTKfyhBhxj-VnsGURQ5bJBG4ZzwjsaNkU7mMdceUWOG1YyLXWJgQWyKWNBz1pw/exec\",\n        {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify(workoutEntries),\n        }\n      );\n\n      const responseData = await response.text();\n      console.log(\"🟢 Google Sheets Response:\", responseData);\n    } catch (error) {\n      console.error(\"❌ Error saving to Google Sheets:\", error);\n    }\n\n    workoutEntries.forEach((entry) => {\n      cleanedExercises[entry.exercise] = entry;\n    });\n\n    console.log(\"🟡 Updated History before saving:\", cleanedExercises);\n\n    const updatedHistory = [{ date, workout: selectedWorkout, exercises: cleanedExercises }, ...history];\n\n    const allProgress = loadProgress();\n    allProgress.history = updatedHistory;\n    saveProgress(allProgress);\n\n    console.log(\"✅ Final History Saved to LocalStorage:\", updatedHistory);\n\n    setHistory(updatedHistory);\n    alert(\"Workout Saved & Synced to Google Sheets! 🎉\");\n  };\n\n  const resetProgress = () => {\n    if (window.confirm(\"Are you sure you want to reset all progress? This cannot be undone.\")) {\n      localStorage.clear();\n      setHistory([]);\n      setWorkoutData({});\n      alert(\"All progress has been reset! 🗑️\");\n    }\n  };\n\n  return (\n    <motion.div className=\"dashboard\">\n      <div className=\"dashboard-header\">\n        <h1>🏋️‍♂️ GYM WORKOUT TRACKER</h1>\n        <button className=\"logout-button\" onClick={onLogout}>🚪 Logout</button>\n      </div>\n\n      <WorkoutSelector selectedWorkout={selectedWorkout} setSelectedWorkout={setSelectedWorkout} />\n\n      <WorkoutList\n        selectedWorkout={selectedWorkout}\n        workoutData={workoutData}\n        updateExerciseData={updateExerciseData}\n        saveWorkout={saveWorkout}\n      />\n\n      <WorkoutHistory history={history} />\n\n      <button className=\"progress-toggle\" onClick={() => setShowProgress(!showProgress)}>\n        {showProgress ? \"Hide Progress 📉\" : \"Show Progress 📈\"}\n      </button>\n\n      {showProgress && <ProgressChart />}\n\n      <button className=\"reset-button\" onClick={resetProgress}>Reset Progress 🗑️</button>\n    </motion.div>\n  );\n};\n\nexport default Dashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}