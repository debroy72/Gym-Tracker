{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport WorkoutSelector from \"../components/WorkoutSelector\";\nimport WorkoutList from \"../components/WorkoutList\";\nimport WorkoutHistory from \"../components/WorkoutHistory\";\nimport { saveProgress, loadProgress } from \"../utils/localStorageHelper\";\nimport { motion } from \"framer-motion\";\nconst Dashboard = () => {\n  _s();\n  const [selectedWorkout, setSelectedWorkout] = useState(\"\");\n  const [workoutData, setWorkoutData] = useState({});\n  const [history, setHistory] = useState([]);\n  useEffect(() => {\n    const savedData = loadProgress();\n    if (selectedWorkout) {\n      setWorkoutData(savedData[selectedWorkout] || {});\n    }\n    setHistory(savedData.history || []);\n  }, [selectedWorkout]);\n  const updateExerciseData = (exercise, field, value) => {\n    setWorkoutData(prev => {\n      const updatedData = {\n        ...prev,\n        [exercise]: {\n          ...prev[exercise],\n          [field]: value\n        }\n      };\n      return updatedData;\n    });\n  };\n  const saveWorkout = () => {\n    const date = new Date().toLocaleDateString();\n\n    // Ensure reps and weight have valid values\n    const cleanedExercises = {};\n    Object.keys(workoutData).forEach(exercise => {\n      var _workoutData$exercise, _workoutData$exercise2, _workoutData$exercise3;\n      cleanedExercises[exercise] = {\n        completed: ((_workoutData$exercise = workoutData[exercise]) === null || _workoutData$exercise === void 0 ? void 0 : _workoutData$exercise.completed) || false,\n        reps: ((_workoutData$exercise2 = workoutData[exercise]) === null || _workoutData$exercise2 === void 0 ? void 0 : _workoutData$exercise2.reps) || \"0\",\n        weight: ((_workoutData$exercise3 = workoutData[exercise]) === null || _workoutData$exercise3 === void 0 ? void 0 : _workoutData$exercise3.weight) || \"0\"\n      };\n    });\n\n    // Add new workout entry to history\n    const updatedHistory = [{\n      date,\n      workout: selectedWorkout,\n      exercises: cleanedExercises\n    }, ...history];\n\n    // Save updated history to LocalStorage\n    const allProgress = loadProgress();\n    allProgress.history = updatedHistory;\n    saveProgress(allProgress);\n\n    // Update state with the new history\n    setHistory(updatedHistory);\n    alert(\"Workout Saved! ðŸŽ‰\");\n  };\n};\n_s(Dashboard, \"q76iE89UNt6WBDGGnySsUJ4igh8=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["useState","useEffect","WorkoutSelector","WorkoutList","WorkoutHistory","saveProgress","loadProgress","motion","Dashboard","_s","selectedWorkout","setSelectedWorkout","workoutData","setWorkoutData","history","setHistory","savedData","updateExerciseData","exercise","field","value","prev","updatedData","saveWorkout","date","Date","toLocaleDateString","cleanedExercises","Object","keys","forEach","_workoutData$exercise","_workoutData$exercise2","_workoutData$exercise3","completed","reps","weight","updatedHistory","workout","exercises","allProgress","alert","_c","$RefreshReg$"],"sources":["/Users/debkumarroy/gym-tracker/src/pages/Dashboard.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport WorkoutSelector from \"../components/WorkoutSelector\";\nimport WorkoutList from \"../components/WorkoutList\";\nimport WorkoutHistory from \"../components/WorkoutHistory\";\nimport { saveProgress, loadProgress } from \"../utils/localStorageHelper\";\nimport { motion } from \"framer-motion\";\n\nconst Dashboard = () => {\n  const [selectedWorkout, setSelectedWorkout] = useState(\"\");\n  const [workoutData, setWorkoutData] = useState({});\n  const [history, setHistory] = useState([]);\n\n  useEffect(() => {\n    const savedData = loadProgress();\n    if (selectedWorkout) {\n      setWorkoutData(savedData[selectedWorkout] || {});\n    }\n    setHistory(savedData.history || []);\n  }, [selectedWorkout]);\n\n  const updateExerciseData = (exercise, field, value) => {\n    setWorkoutData((prev) => {\n      const updatedData = {\n        ...prev,\n        [exercise]: { ...prev[exercise], [field]: value },\n      };\n      return updatedData;\n    });\n  };\n\n  const saveWorkout = () => {\n    const date = new Date().toLocaleDateString();\n  \n    // Ensure reps and weight have valid values\n    const cleanedExercises = {};\n    Object.keys(workoutData).forEach((exercise) => {\n      cleanedExercises[exercise] = {\n        completed: workoutData[exercise]?.completed || false,\n        reps: workoutData[exercise]?.reps || \"0\",\n        weight: workoutData[exercise]?.weight || \"0\",\n      };\n    });\n  \n    // Add new workout entry to history\n    const updatedHistory = [\n      { date, workout: selectedWorkout, exercises: cleanedExercises },\n      ...history,\n    ];\n  \n    // Save updated history to LocalStorage\n    const allProgress = loadProgress();\n    allProgress.history = updatedHistory;\n    saveProgress(allProgress);\n  \n    // Update state with the new history\n    setHistory(updatedHistory);\n    alert(\"Workout Saved! ðŸŽ‰\");\n  };\n};\n\nexport default Dashboard;"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,eAAe,MAAM,+BAA+B;AAC3D,OAAOC,WAAW,MAAM,2BAA2B;AACnD,OAAOC,cAAc,MAAM,8BAA8B;AACzD,SAASC,YAAY,EAAEC,YAAY,QAAQ,6BAA6B;AACxE,SAASC,MAAM,QAAQ,eAAe;AAEtC,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACY,WAAW,EAAEC,cAAc,CAAC,GAAGb,QAAQ,CAAC,CAAC,CAAC,CAAC;EAClD,MAAM,CAACc,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAE1CC,SAAS,CAAC,MAAM;IACd,MAAMe,SAAS,GAAGV,YAAY,CAAC,CAAC;IAChC,IAAII,eAAe,EAAE;MACnBG,cAAc,CAACG,SAAS,CAACN,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC;IAClD;IACAK,UAAU,CAACC,SAAS,CAACF,OAAO,IAAI,EAAE,CAAC;EACrC,CAAC,EAAE,CAACJ,eAAe,CAAC,CAAC;EAErB,MAAMO,kBAAkB,GAAGA,CAACC,QAAQ,EAAEC,KAAK,EAAEC,KAAK,KAAK;IACrDP,cAAc,CAAEQ,IAAI,IAAK;MACvB,MAAMC,WAAW,GAAG;QAClB,GAAGD,IAAI;QACP,CAACH,QAAQ,GAAG;UAAE,GAAGG,IAAI,CAACH,QAAQ,CAAC;UAAE,CAACC,KAAK,GAAGC;QAAM;MAClD,CAAC;MACD,OAAOE,WAAW;IACpB,CAAC,CAAC;EACJ,CAAC;EAED,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACxB,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,kBAAkB,CAAC,CAAC;;IAE5C;IACA,MAAMC,gBAAgB,GAAG,CAAC,CAAC;IAC3BC,MAAM,CAACC,IAAI,CAACjB,WAAW,CAAC,CAACkB,OAAO,CAAEZ,QAAQ,IAAK;MAAA,IAAAa,qBAAA,EAAAC,sBAAA,EAAAC,sBAAA;MAC7CN,gBAAgB,CAACT,QAAQ,CAAC,GAAG;QAC3BgB,SAAS,EAAE,EAAAH,qBAAA,GAAAnB,WAAW,CAACM,QAAQ,CAAC,cAAAa,qBAAA,uBAArBA,qBAAA,CAAuBG,SAAS,KAAI,KAAK;QACpDC,IAAI,EAAE,EAAAH,sBAAA,GAAApB,WAAW,CAACM,QAAQ,CAAC,cAAAc,sBAAA,uBAArBA,sBAAA,CAAuBG,IAAI,KAAI,GAAG;QACxCC,MAAM,EAAE,EAAAH,sBAAA,GAAArB,WAAW,CAACM,QAAQ,CAAC,cAAAe,sBAAA,uBAArBA,sBAAA,CAAuBG,MAAM,KAAI;MAC3C,CAAC;IACH,CAAC,CAAC;;IAEF;IACA,MAAMC,cAAc,GAAG,CACrB;MAAEb,IAAI;MAAEc,OAAO,EAAE5B,eAAe;MAAE6B,SAAS,EAAEZ;IAAiB,CAAC,EAC/D,GAAGb,OAAO,CACX;;IAED;IACA,MAAM0B,WAAW,GAAGlC,YAAY,CAAC,CAAC;IAClCkC,WAAW,CAAC1B,OAAO,GAAGuB,cAAc;IACpChC,YAAY,CAACmC,WAAW,CAAC;;IAEzB;IACAzB,UAAU,CAACsB,cAAc,CAAC;IAC1BI,KAAK,CAAC,mBAAmB,CAAC;EAC5B,CAAC;AACH,CAAC;AAAChC,EAAA,CAnDID,SAAS;AAAAkC,EAAA,GAATlC,SAAS;AAqDf,eAAeA,SAAS;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}