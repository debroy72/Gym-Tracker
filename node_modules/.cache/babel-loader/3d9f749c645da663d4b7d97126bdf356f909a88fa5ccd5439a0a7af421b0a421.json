{"ast":null,"code":"var _jsxFileName = \"/Users/debkumarroy/gym-tracker mobile version/src/pages/Dashboard.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport WorkoutSelector from \"../components/WorkoutSelector\";\nimport WorkoutList from \"../components/WorkoutList\";\nimport WorkoutHistory from \"../components/WorkoutHistory\";\nimport ProgressChart from \"../components/ProgressChart\";\nimport { saveProgress, loadProgress } from \"../utils/localStorageHelper\";\nimport { motion } from \"framer-motion\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = ({\n  onLogout\n}) => {\n  _s();\n  const [selectedWorkout, setSelectedWorkout] = useState(\"\");\n  const [workoutData, setWorkoutData] = useState({});\n  const [history, setHistory] = useState([]);\n  const [showProgress, setShowProgress] = useState(false);\n\n  // ✅ Load saved progress on mount & when workout selection changes\n  useEffect(() => {\n    const savedData = loadProgress();\n    console.log(\"📂 Loaded Saved Data:\", savedData);\n    if (selectedWorkout) {\n      const workoutEntries = savedData[selectedWorkout] || {};\n      console.log(\"🔄 Setting Workout Data for:\", selectedWorkout, workoutEntries);\n      setWorkoutData(workoutEntries);\n    }\n    setHistory(savedData.history || []);\n  }, [selectedWorkout]);\n\n  // ✅ Update Exercise Data & Ensure Values Persist Properly\n  const updateExerciseData = (exercise, field, value) => {\n    setWorkoutData(prev => {\n      const updatedData = {\n        ...prev,\n        [exercise]: {\n          ...prev[exercise],\n          [field]: value !== \"\" ? value : \"\" // Keep empty inputs\n        }\n      };\n      console.log(\"✏️ Updated Workout Data:\", updatedData);\n      return updatedData;\n    });\n  };\n\n  // ✅ Save Workout & Ensure Data is Stored Correctly\n  const saveWorkout = () => {\n    const date = new Date().toLocaleDateString();\n    console.log(\"💾 Saving Workout for Date:\", date);\n    const cleanedExercises = {};\n    Object.keys(workoutData).forEach(exercise => {\n      var _workoutData$exercise, _workoutData$exercise2, _workoutData$exercise3, _workoutData$exercise4, _workoutData$exercise5, _workoutData$exercise6, _workoutData$exercise7, _workoutData$exercise8;\n      cleanedExercises[exercise] = {\n        completed: (_workoutData$exercise = (_workoutData$exercise2 = workoutData[exercise]) === null || _workoutData$exercise2 === void 0 ? void 0 : _workoutData$exercise2.completed) !== null && _workoutData$exercise !== void 0 ? _workoutData$exercise : false,\n        weight1: (_workoutData$exercise3 = (_workoutData$exercise4 = workoutData[exercise]) === null || _workoutData$exercise4 === void 0 ? void 0 : _workoutData$exercise4.weight1) !== null && _workoutData$exercise3 !== void 0 ? _workoutData$exercise3 : \"\",\n        // Allow empty input\n        weight2: (_workoutData$exercise5 = (_workoutData$exercise6 = workoutData[exercise]) === null || _workoutData$exercise6 === void 0 ? void 0 : _workoutData$exercise6.weight2) !== null && _workoutData$exercise5 !== void 0 ? _workoutData$exercise5 : \"\",\n        weight3: (_workoutData$exercise7 = (_workoutData$exercise8 = workoutData[exercise]) === null || _workoutData$exercise8 === void 0 ? void 0 : _workoutData$exercise8.weight3) !== null && _workoutData$exercise7 !== void 0 ? _workoutData$exercise7 : \"\"\n      };\n    });\n    console.log(\"📊 Final Workout Data Before Saving:\", cleanedExercises);\n    const updatedHistory = [{\n      date,\n      workout: selectedWorkout,\n      exercises: cleanedExercises\n    }, ...history];\n    const allProgress = loadProgress();\n    allProgress.history = updatedHistory;\n    allProgress[selectedWorkout] = cleanedExercises;\n    saveProgress(allProgress);\n    setHistory(updatedHistory);\n    setWorkoutData(cleanedExercises);\n    console.log(\"✅ Final History Saved:\", updatedHistory);\n    alert(\"Workout Saved! 🎉\");\n  };\n\n  // ✅ Reset all workout history and progress\n  const resetProgress = () => {\n    if (window.confirm(\"Are you sure you want to reset all progress? This cannot be undone.\")) {\n      localStorage.clear();\n      setHistory([]);\n      setWorkoutData({});\n      alert(\"All progress has been reset! 🗑️\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(motion.div, {\n    className: \"dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\uD83C\\uDFCB\\uFE0F\\u200D\\u2642\\uFE0F GYM WORKOUT TRACKER\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"logout-button\",\n        onClick: onLogout,\n        children: \"\\uD83D\\uDEAA Logout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(WorkoutSelector, {\n      selectedWorkout: selectedWorkout,\n      setSelectedWorkout: setSelectedWorkout\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(WorkoutList, {\n      selectedWorkout: selectedWorkout,\n      workoutData: workoutData,\n      updateExerciseData: updateExerciseData,\n      saveWorkout: saveWorkout\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(WorkoutHistory, {\n      history: history\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"progress-toggle\",\n      onClick: () => setShowProgress(!showProgress),\n      children: showProgress ? \"Hide Progress 📉\" : \"Show Progress 📈\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), showProgress && /*#__PURE__*/_jsxDEV(ProgressChart, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"reset-button\",\n      onClick: resetProgress,\n      children: \"Reset Progress \\uD83D\\uDDD1\\uFE0F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"gL3/H86Lx9kbX+h5yqYBANl5GwE=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["useState","useEffect","WorkoutSelector","WorkoutList","WorkoutHistory","ProgressChart","saveProgress","loadProgress","motion","jsxDEV","_jsxDEV","Dashboard","onLogout","_s","selectedWorkout","setSelectedWorkout","workoutData","setWorkoutData","history","setHistory","showProgress","setShowProgress","savedData","console","log","workoutEntries","updateExerciseData","exercise","field","value","prev","updatedData","saveWorkout","date","Date","toLocaleDateString","cleanedExercises","Object","keys","forEach","_workoutData$exercise","_workoutData$exercise2","_workoutData$exercise3","_workoutData$exercise4","_workoutData$exercise5","_workoutData$exercise6","_workoutData$exercise7","_workoutData$exercise8","completed","weight1","weight2","weight3","updatedHistory","workout","exercises","allProgress","alert","resetProgress","window","confirm","localStorage","clear","div","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/debkumarroy/gym-tracker mobile version/src/pages/Dashboard.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport WorkoutSelector from \"../components/WorkoutSelector\";\nimport WorkoutList from \"../components/WorkoutList\";\nimport WorkoutHistory from \"../components/WorkoutHistory\";\nimport ProgressChart from \"../components/ProgressChart\";\nimport { saveProgress, loadProgress } from \"../utils/localStorageHelper\";\nimport { motion } from \"framer-motion\";\n\nconst Dashboard = ({ onLogout }) => {\n  const [selectedWorkout, setSelectedWorkout] = useState(\"\");\n  const [workoutData, setWorkoutData] = useState({});\n  const [history, setHistory] = useState([]);\n  const [showProgress, setShowProgress] = useState(false);\n\n  // ✅ Load saved progress on mount & when workout selection changes\n  useEffect(() => {\n    const savedData = loadProgress();\n    console.log(\"📂 Loaded Saved Data:\", savedData);\n\n    if (selectedWorkout) {\n      const workoutEntries = savedData[selectedWorkout] || {};\n      console.log(\"🔄 Setting Workout Data for:\", selectedWorkout, workoutEntries);\n      setWorkoutData(workoutEntries);\n    }\n\n    setHistory(savedData.history || []);\n  }, [selectedWorkout]);\n\n  // ✅ Update Exercise Data & Ensure Values Persist Properly\n  const updateExerciseData = (exercise, field, value) => {\n    setWorkoutData((prev) => {\n      const updatedData = {\n        ...prev,\n        [exercise]: {\n          ...prev[exercise],\n          [field]: value !== \"\" ? value : \"\", // Keep empty inputs\n        },\n      };\n\n      console.log(\"✏️ Updated Workout Data:\", updatedData);\n      return updatedData;\n    });\n  };\n\n  // ✅ Save Workout & Ensure Data is Stored Correctly\n  const saveWorkout = () => {\n    const date = new Date().toLocaleDateString();\n    console.log(\"💾 Saving Workout for Date:\", date);\n\n    const cleanedExercises = {};\n    Object.keys(workoutData).forEach((exercise) => {\n      cleanedExercises[exercise] = {\n        completed: workoutData[exercise]?.completed ?? false,\n        weight1: workoutData[exercise]?.weight1 ?? \"\", // Allow empty input\n        weight2: workoutData[exercise]?.weight2 ?? \"\",\n        weight3: workoutData[exercise]?.weight3 ?? \"\",\n      };\n    });\n\n    console.log(\"📊 Final Workout Data Before Saving:\", cleanedExercises);\n\n    const updatedHistory = [\n      { date, workout: selectedWorkout, exercises: cleanedExercises },\n      ...history,\n    ];\n\n    const allProgress = loadProgress();\n    allProgress.history = updatedHistory;\n    allProgress[selectedWorkout] = cleanedExercises;\n    saveProgress(allProgress);\n\n    setHistory(updatedHistory);\n    setWorkoutData(cleanedExercises);\n    console.log(\"✅ Final History Saved:\", updatedHistory);\n    alert(\"Workout Saved! 🎉\");\n  };\n\n  // ✅ Reset all workout history and progress\n  const resetProgress = () => {\n    if (window.confirm(\"Are you sure you want to reset all progress? This cannot be undone.\")) {\n      localStorage.clear();\n      setHistory([]);\n      setWorkoutData({});\n      alert(\"All progress has been reset! 🗑️\");\n    }\n  };\n\n  return (\n    <motion.div className=\"dashboard\">\n      <div className=\"dashboard-header\">\n        <h1>🏋️‍♂️ GYM WORKOUT TRACKER</h1>\n        <button className=\"logout-button\" onClick={onLogout}>🚪 Logout</button>\n      </div>\n\n      <WorkoutSelector selectedWorkout={selectedWorkout} setSelectedWorkout={setSelectedWorkout} />\n\n      <WorkoutList\n        selectedWorkout={selectedWorkout}\n        workoutData={workoutData}\n        updateExerciseData={updateExerciseData}\n        saveWorkout={saveWorkout}\n      />\n\n      <WorkoutHistory history={history} />\n\n      <button className=\"progress-toggle\" onClick={() => setShowProgress(!showProgress)}>\n        {showProgress ? \"Hide Progress 📉\" : \"Show Progress 📈\"}\n      </button>\n\n      {showProgress && <ProgressChart />}\n\n      <button className=\"reset-button\" onClick={resetProgress}>Reset Progress 🗑️</button>\n    </motion.div>\n  );\n};\n\nexport default Dashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}