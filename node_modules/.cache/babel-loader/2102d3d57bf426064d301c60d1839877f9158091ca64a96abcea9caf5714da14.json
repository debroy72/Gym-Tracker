{"ast":null,"code":"import React,{useEffect,useState}from\"react\";import{Line}from\"react-chartjs-2\";import{Chart as ChartJS,LineElement,CategoryScale,LinearScale,PointElement,Tooltip,Legend}from\"chart.js\";import{loadProgress}from\"../utils/localStorageHelper\";// Register chart components\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";ChartJS.register(LineElement,CategoryScale,LinearScale,PointElement,Tooltip,Legend);const ProgressChart=()=>{const[chartData,setChartData]=useState({labels:[],datasets:[]});useEffect(()=>{const progressData=loadProgress().history||[];// Group workouts by week and category\nconst categoryProgress={};const weekLabels=new Set();progressData.forEach(entry=>{const[day,month,year]=entry.date.split(\"/\");const weekKey=\"\".concat(year,\"-W\").concat(Math.ceil(day/7));// Group by week\nweekLabels.add(weekKey);Object.keys(entry.exercises).forEach(exercise=>{const category=getCategory(exercise);if(!categoryProgress[category]){categoryProgress[category]={};}if(!categoryProgress[category][weekKey]){categoryProgress[category][weekKey]={reps:0,weight:0,count:0};}categoryProgress[category][weekKey].reps+=parseInt(entry.exercises[exercise].reps||0,10);categoryProgress[category][weekKey].weight+=parseInt(entry.exercises[exercise].weight||0,10);categoryProgress[category][weekKey].count+=1;});});// Prepare dataset for each category\nconst datasets=Object.keys(categoryProgress).map(category=>({label:category,data:Object.values(categoryProgress[category]).map(data=>data.count>0?Math.round(data.weight/data.count):0),// Average weight lifted per exercise\nborderColor:getColor(category),fill:false,tension:0.2}));setChartData({labels:Array.from(weekLabels).sort(),datasets:datasets});},[]);return/*#__PURE__*/_jsxs(\"div\",{className:\"progress-chart\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"\\uD83D\\uDCC8 Weekly Progress\"}),/*#__PURE__*/_jsx(Line,{data:chartData})]});};// Helper function to categorize exercises\nconst getCategory=exercise=>{if(exercise.includes(\"Bench Press\")||exercise.includes(\"Tricep\"))return\"Chest & Triceps\";if(exercise.includes(\"Shoulder\")||exercise.includes(\"Lat\")||exercise.includes(\"Pull\"))return\"Back & Shoulders\";if(exercise.includes(\"Bicep\")||exercise.includes(\"Plank\")||exercise.includes(\"Crunches\"))return\"Cardio & Biceps\";if(exercise.includes(\"Leg\")||exercise.includes(\"Squats\"))return\"Legs & Core\";return\"Other\";};// Assign colors to categories\nconst getColor=category=>{const colors={\"Chest & Triceps\":\"rgba(255, 99, 132, 1)\",\"Back & Shoulders\":\"rgba(54, 162, 235, 1)\",\"Cardio & Biceps\":\"rgba(255, 206, 86, 1)\",\"Legs & Core\":\"rgba(75, 192, 192, 1)\"};return colors[category]||\"rgba(153, 102, 255, 1)\";};export default ProgressChart;","map":{"version":3,"names":["React","useEffect","useState","Line","Chart","ChartJS","LineElement","CategoryScale","LinearScale","PointElement","Tooltip","Legend","loadProgress","jsx","_jsx","jsxs","_jsxs","register","ProgressChart","chartData","setChartData","labels","datasets","progressData","history","categoryProgress","weekLabels","Set","forEach","entry","day","month","year","date","split","weekKey","concat","Math","ceil","add","Object","keys","exercises","exercise","category","getCategory","reps","weight","count","parseInt","map","label","data","values","round","borderColor","getColor","fill","tension","Array","from","sort","className","children","includes","colors"],"sources":["/Users/debkumarroy/gym-tracker mobile version/src/components/ProgressChart.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { Chart as ChartJS, LineElement, CategoryScale, LinearScale, PointElement, Tooltip, Legend } from \"chart.js\";\nimport { loadProgress } from \"../utils/localStorageHelper\";\n\n// Register chart components\nChartJS.register(LineElement, CategoryScale, LinearScale, PointElement, Tooltip, Legend);\n\nconst ProgressChart = () => {\n  const [chartData, setChartData] = useState({\n    labels: [],\n    datasets: [],\n  });\n\n  useEffect(() => {\n    const progressData = loadProgress().history || [];\n\n    // Group workouts by week and category\n    const categoryProgress = {};\n    const weekLabels = new Set();\n\n    progressData.forEach((entry) => {\n      const [day, month, year] = entry.date.split(\"/\");\n      const weekKey = `${year}-W${Math.ceil(day / 7)}`; // Group by week\n      weekLabels.add(weekKey);\n\n      Object.keys(entry.exercises).forEach((exercise) => {\n        const category = getCategory(exercise);\n        if (!categoryProgress[category]) {\n          categoryProgress[category] = {};\n        }\n\n        if (!categoryProgress[category][weekKey]) {\n          categoryProgress[category][weekKey] = { reps: 0, weight: 0, count: 0 };\n        }\n\n        categoryProgress[category][weekKey].reps += parseInt(entry.exercises[exercise].reps || 0, 10);\n        categoryProgress[category][weekKey].weight += parseInt(entry.exercises[exercise].weight || 0, 10);\n        categoryProgress[category][weekKey].count += 1;\n      });\n    });\n\n    // Prepare dataset for each category\n    const datasets = Object.keys(categoryProgress).map((category) => ({\n      label: category,\n      data: Object.values(categoryProgress[category]).map((data) =>\n        data.count > 0 ? Math.round(data.weight / data.count) : 0\n      ), // Average weight lifted per exercise\n      borderColor: getColor(category),\n      fill: false,\n      tension: 0.2,\n    }));\n\n    setChartData({\n      labels: Array.from(weekLabels).sort(),\n      datasets: datasets,\n    });\n  }, []);\n\n  return (\n    <div className=\"progress-chart\">\n      <h2>ðŸ“ˆ Weekly Progress</h2>\n      <Line data={chartData} />\n    </div>\n  );\n};\n\n// Helper function to categorize exercises\nconst getCategory = (exercise) => {\n  if (exercise.includes(\"Bench Press\") || exercise.includes(\"Tricep\")) return \"Chest & Triceps\";\n  if (exercise.includes(\"Shoulder\") || exercise.includes(\"Lat\") || exercise.includes(\"Pull\")) return \"Back & Shoulders\";\n  if (exercise.includes(\"Bicep\") || exercise.includes(\"Plank\") || exercise.includes(\"Crunches\")) return \"Cardio & Biceps\";\n  if (exercise.includes(\"Leg\") || exercise.includes(\"Squats\")) return \"Legs & Core\";\n  return \"Other\";\n};\n\n// Assign colors to categories\nconst getColor = (category) => {\n  const colors = {\n    \"Chest & Triceps\": \"rgba(255, 99, 132, 1)\",\n    \"Back & Shoulders\": \"rgba(54, 162, 235, 1)\",\n    \"Cardio & Biceps\": \"rgba(255, 206, 86, 1)\",\n    \"Legs & Core\": \"rgba(75, 192, 192, 1)\",\n  };\n  return colors[category] || \"rgba(153, 102, 255, 1)\";\n};\n\nexport default ProgressChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}