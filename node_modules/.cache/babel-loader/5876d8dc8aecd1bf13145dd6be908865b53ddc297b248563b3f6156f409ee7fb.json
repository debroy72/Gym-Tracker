{"ast":null,"code":"// ✅ Save Progress to LocalStorage\nexport const saveProgress=data=>{localStorage.setItem(\"workoutProgress\",JSON.stringify(data));};// ✅ Load Progress from LocalStorage\nexport const loadProgress=()=>{const storedData=localStorage.getItem(\"workoutProgress\");return storedData?JSON.parse(storedData):{history:[],bestLifts:{}};};// ✅ Update Best Lifts (Highest Weight for Each Exercise)\nexport const updateBestLifts=workoutData=>{let savedProgress=loadProgress();if(!savedProgress.bestLifts)savedProgress.bestLifts={};Object.keys(workoutData).forEach(exercise=>{const weights=[Number(workoutData[exercise].weight1||0),Number(workoutData[exercise].weight2||0),Number(workoutData[exercise].weight3||0)];const maxWeight=Math.max(...weights);// Get highest weight lifted\nif(!savedProgress.bestLifts[exercise]||maxWeight>savedProgress.bestLifts[exercise]){savedProgress.bestLifts[exercise]=maxWeight;}});saveProgress(savedProgress);};// ✅ Get Best Lifts Data\nexport const getBestLifts=()=>{const progress=loadProgress();return progress.bestLifts||{};};// ✅ Get Workout Achievements\nexport const getAchievements=()=>{const progress=loadProgress();let achievements=[];const workoutCount=progress.history?progress.history.length:0;if(workoutCount>=10)achievements.push(\"🏆 10 Workouts Completed\");if(workoutCount>=20)achievements.push(\"🥇 20 Workouts Completed\");if(Object.keys(progress.bestLifts||{}).length>=5)achievements.push(\"💪 5 Exercises Tracked\");if(Math.max(...Object.values(progress.bestLifts||{0:0}))>=100)achievements.push(\"🔥 100kg Lifted!\");return achievements;};","map":{"version":3,"names":["saveProgress","data","localStorage","setItem","JSON","stringify","loadProgress","storedData","getItem","parse","history","bestLifts","updateBestLifts","workoutData","savedProgress","Object","keys","forEach","exercise","weights","Number","weight1","weight2","weight3","maxWeight","Math","max","getBestLifts","progress","getAchievements","achievements","workoutCount","length","push","values"],"sources":["/Users/debkumarroy/gym-tracker mobile version/src/utils/localStorageHelper.js"],"sourcesContent":["// ✅ Save Progress to LocalStorage\nexport const saveProgress = (data) => {\n  localStorage.setItem(\"workoutProgress\", JSON.stringify(data));\n};\n\n// ✅ Load Progress from LocalStorage\nexport const loadProgress = () => {\n  const storedData = localStorage.getItem(\"workoutProgress\");\n  return storedData ? JSON.parse(storedData) : { history: [], bestLifts: {} };\n};\n\n// ✅ Update Best Lifts (Highest Weight for Each Exercise)\nexport const updateBestLifts = (workoutData) => {\n  let savedProgress = loadProgress();\n  if (!savedProgress.bestLifts) savedProgress.bestLifts = {};\n\n  Object.keys(workoutData).forEach((exercise) => {\n    const weights = [\n      Number(workoutData[exercise].weight1 || 0),\n      Number(workoutData[exercise].weight2 || 0),\n      Number(workoutData[exercise].weight3 || 0),\n    ];\n    const maxWeight = Math.max(...weights); // Get highest weight lifted\n\n    if (!savedProgress.bestLifts[exercise] || maxWeight > savedProgress.bestLifts[exercise]) {\n      savedProgress.bestLifts[exercise] = maxWeight;\n    }\n  });\n\n  saveProgress(savedProgress);\n};\n\n// ✅ Get Best Lifts Data\nexport const getBestLifts = () => {\n  const progress = loadProgress();\n  return progress.bestLifts || {};\n};\n\n// ✅ Get Workout Achievements\nexport const getAchievements = () => {\n  const progress = loadProgress();\n  let achievements = [];\n\n  const workoutCount = progress.history ? progress.history.length : 0;\n\n  if (workoutCount >= 10) achievements.push(\"🏆 10 Workouts Completed\");\n  if (workoutCount >= 20) achievements.push(\"🥇 20 Workouts Completed\");\n  if (Object.keys(progress.bestLifts || {}).length >= 5) achievements.push(\"💪 5 Exercises Tracked\");\n  if (Math.max(...Object.values(progress.bestLifts || { 0: 0 })) >= 100) achievements.push(\"🔥 100kg Lifted!\");\n\n  return achievements;\n};"],"mappings":"AAAA;AACA,MAAO,MAAM,CAAAA,YAAY,CAAIC,IAAI,EAAK,CACpCC,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAEC,IAAI,CAACC,SAAS,CAACJ,IAAI,CAAC,CAAC,CAC/D,CAAC,CAED;AACA,MAAO,MAAM,CAAAK,YAAY,CAAGA,CAAA,GAAM,CAChC,KAAM,CAAAC,UAAU,CAAGL,YAAY,CAACM,OAAO,CAAC,iBAAiB,CAAC,CAC1D,MAAO,CAAAD,UAAU,CAAGH,IAAI,CAACK,KAAK,CAACF,UAAU,CAAC,CAAG,CAAEG,OAAO,CAAE,EAAE,CAAEC,SAAS,CAAE,CAAC,CAAE,CAAC,CAC7E,CAAC,CAED;AACA,MAAO,MAAM,CAAAC,eAAe,CAAIC,WAAW,EAAK,CAC9C,GAAI,CAAAC,aAAa,CAAGR,YAAY,CAAC,CAAC,CAClC,GAAI,CAACQ,aAAa,CAACH,SAAS,CAAEG,aAAa,CAACH,SAAS,CAAG,CAAC,CAAC,CAE1DI,MAAM,CAACC,IAAI,CAACH,WAAW,CAAC,CAACI,OAAO,CAAEC,QAAQ,EAAK,CAC7C,KAAM,CAAAC,OAAO,CAAG,CACdC,MAAM,CAACP,WAAW,CAACK,QAAQ,CAAC,CAACG,OAAO,EAAI,CAAC,CAAC,CAC1CD,MAAM,CAACP,WAAW,CAACK,QAAQ,CAAC,CAACI,OAAO,EAAI,CAAC,CAAC,CAC1CF,MAAM,CAACP,WAAW,CAACK,QAAQ,CAAC,CAACK,OAAO,EAAI,CAAC,CAAC,CAC3C,CACD,KAAM,CAAAC,SAAS,CAAGC,IAAI,CAACC,GAAG,CAAC,GAAGP,OAAO,CAAC,CAAE;AAExC,GAAI,CAACL,aAAa,CAACH,SAAS,CAACO,QAAQ,CAAC,EAAIM,SAAS,CAAGV,aAAa,CAACH,SAAS,CAACO,QAAQ,CAAC,CAAE,CACvFJ,aAAa,CAACH,SAAS,CAACO,QAAQ,CAAC,CAAGM,SAAS,CAC/C,CACF,CAAC,CAAC,CAEFxB,YAAY,CAACc,aAAa,CAAC,CAC7B,CAAC,CAED;AACA,MAAO,MAAM,CAAAa,YAAY,CAAGA,CAAA,GAAM,CAChC,KAAM,CAAAC,QAAQ,CAAGtB,YAAY,CAAC,CAAC,CAC/B,MAAO,CAAAsB,QAAQ,CAACjB,SAAS,EAAI,CAAC,CAAC,CACjC,CAAC,CAED;AACA,MAAO,MAAM,CAAAkB,eAAe,CAAGA,CAAA,GAAM,CACnC,KAAM,CAAAD,QAAQ,CAAGtB,YAAY,CAAC,CAAC,CAC/B,GAAI,CAAAwB,YAAY,CAAG,EAAE,CAErB,KAAM,CAAAC,YAAY,CAAGH,QAAQ,CAAClB,OAAO,CAAGkB,QAAQ,CAAClB,OAAO,CAACsB,MAAM,CAAG,CAAC,CAEnE,GAAID,YAAY,EAAI,EAAE,CAAED,YAAY,CAACG,IAAI,CAAC,0BAA0B,CAAC,CACrE,GAAIF,YAAY,EAAI,EAAE,CAAED,YAAY,CAACG,IAAI,CAAC,0BAA0B,CAAC,CACrE,GAAIlB,MAAM,CAACC,IAAI,CAACY,QAAQ,CAACjB,SAAS,EAAI,CAAC,CAAC,CAAC,CAACqB,MAAM,EAAI,CAAC,CAAEF,YAAY,CAACG,IAAI,CAAC,wBAAwB,CAAC,CAClG,GAAIR,IAAI,CAACC,GAAG,CAAC,GAAGX,MAAM,CAACmB,MAAM,CAACN,QAAQ,CAACjB,SAAS,EAAI,CAAE,CAAC,CAAE,CAAE,CAAC,CAAC,CAAC,EAAI,GAAG,CAAEmB,YAAY,CAACG,IAAI,CAAC,kBAAkB,CAAC,CAE5G,MAAO,CAAAH,YAAY,CACrB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}