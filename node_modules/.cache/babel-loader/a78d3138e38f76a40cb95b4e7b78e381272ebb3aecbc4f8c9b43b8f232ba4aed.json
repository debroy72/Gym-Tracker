{"ast":null,"code":"// ✅ Save Progress to LocalStorage\nexport const saveProgress = data => {\n  localStorage.setItem(\"workoutProgress\", JSON.stringify(data));\n};\n\n// ✅ Load Progress from LocalStorage\nexport const loadProgress = () => {\n  const storedData = localStorage.getItem(\"workoutProgress\");\n  return storedData ? JSON.parse(storedData) : {\n    history: [],\n    bestLifts: {}\n  };\n};\n\n// ✅ Update Best Lifts (Highest Weight for Each Exercise)\nexport const updateBestLifts = workoutData => {\n  let savedProgress = loadProgress();\n  if (!savedProgress.bestLifts) savedProgress.bestLifts = {};\n  Object.keys(workoutData).forEach(exercise => {\n    const weights = [Number(workoutData[exercise].weight1 || 0), Number(workoutData[exercise].weight2 || 0), Number(workoutData[exercise].weight3 || 0)];\n    const maxWeight = Math.max(...weights); // Get highest weight lifted\n\n    if (!savedProgress.bestLifts[exercise] || maxWeight > savedProgress.bestLifts[exercise]) {\n      savedProgress.bestLifts[exercise] = maxWeight;\n    }\n  });\n  saveProgress(savedProgress);\n};\n\n// ✅ Get Best Lifts Data\nexport const getBestLifts = () => {\n  const progress = loadProgress();\n  return progress.bestLifts || {};\n};\n\n// ✅ Get Workout Achievements\nexport const getAchievements = () => {\n  const progress = loadProgress();\n  let achievements = [];\n  const workoutCount = progress.history ? progress.history.length : 0;\n  if (workoutCount >= 10) achievements.push(\"🏆 10 Workouts Completed\");\n  if (workoutCount >= 20) achievements.push(\"🥇 20 Workouts Completed\");\n  if (Object.keys(progress.bestLifts || {}).length >= 5) achievements.push(\"💪 5 Exercises Tracked\");\n  if (Math.max(...Object.values(progress.bestLifts || {\n    0: 0\n  })) >= 100) achievements.push(\"🔥 100kg Lifted!\");\n  return achievements;\n};","map":{"version":3,"names":["saveProgress","data","localStorage","setItem","JSON","stringify","loadProgress","storedData","getItem","parse","history","bestLifts","updateBestLifts","workoutData","savedProgress","Object","keys","forEach","exercise","weights","Number","weight1","weight2","weight3","maxWeight","Math","max","getBestLifts","progress","getAchievements","achievements","workoutCount","length","push","values"],"sources":["/Users/debkumarroy/gym-tracker mobile version/src/utils/localStorageHelper.js"],"sourcesContent":["// ✅ Save Progress to LocalStorage\nexport const saveProgress = (data) => {\n  localStorage.setItem(\"workoutProgress\", JSON.stringify(data));\n};\n\n// ✅ Load Progress from LocalStorage\nexport const loadProgress = () => {\n  const storedData = localStorage.getItem(\"workoutProgress\");\n  return storedData ? JSON.parse(storedData) : { history: [], bestLifts: {} };\n};\n\n// ✅ Update Best Lifts (Highest Weight for Each Exercise)\nexport const updateBestLifts = (workoutData) => {\n  let savedProgress = loadProgress();\n  if (!savedProgress.bestLifts) savedProgress.bestLifts = {};\n\n  Object.keys(workoutData).forEach((exercise) => {\n    const weights = [\n      Number(workoutData[exercise].weight1 || 0),\n      Number(workoutData[exercise].weight2 || 0),\n      Number(workoutData[exercise].weight3 || 0),\n    ];\n    const maxWeight = Math.max(...weights); // Get highest weight lifted\n\n    if (!savedProgress.bestLifts[exercise] || maxWeight > savedProgress.bestLifts[exercise]) {\n      savedProgress.bestLifts[exercise] = maxWeight;\n    }\n  });\n\n  saveProgress(savedProgress);\n};\n\n// ✅ Get Best Lifts Data\nexport const getBestLifts = () => {\n  const progress = loadProgress();\n  return progress.bestLifts || {};\n};\n\n// ✅ Get Workout Achievements\nexport const getAchievements = () => {\n  const progress = loadProgress();\n  let achievements = [];\n\n  const workoutCount = progress.history ? progress.history.length : 0;\n\n  if (workoutCount >= 10) achievements.push(\"🏆 10 Workouts Completed\");\n  if (workoutCount >= 20) achievements.push(\"🥇 20 Workouts Completed\");\n  if (Object.keys(progress.bestLifts || {}).length >= 5) achievements.push(\"💪 5 Exercises Tracked\");\n  if (Math.max(...Object.values(progress.bestLifts || { 0: 0 })) >= 100) achievements.push(\"🔥 100kg Lifted!\");\n\n  return achievements;\n};"],"mappings":"AAAA;AACA,OAAO,MAAMA,YAAY,GAAIC,IAAI,IAAK;EACpCC,YAAY,CAACC,OAAO,CAAC,iBAAiB,EAAEC,IAAI,CAACC,SAAS,CAACJ,IAAI,CAAC,CAAC;AAC/D,CAAC;;AAED;AACA,OAAO,MAAMK,YAAY,GAAGA,CAAA,KAAM;EAChC,MAAMC,UAAU,GAAGL,YAAY,CAACM,OAAO,CAAC,iBAAiB,CAAC;EAC1D,OAAOD,UAAU,GAAGH,IAAI,CAACK,KAAK,CAACF,UAAU,CAAC,GAAG;IAAEG,OAAO,EAAE,EAAE;IAAEC,SAAS,EAAE,CAAC;EAAE,CAAC;AAC7E,CAAC;;AAED;AACA,OAAO,MAAMC,eAAe,GAAIC,WAAW,IAAK;EAC9C,IAAIC,aAAa,GAAGR,YAAY,CAAC,CAAC;EAClC,IAAI,CAACQ,aAAa,CAACH,SAAS,EAAEG,aAAa,CAACH,SAAS,GAAG,CAAC,CAAC;EAE1DI,MAAM,CAACC,IAAI,CAACH,WAAW,CAAC,CAACI,OAAO,CAAEC,QAAQ,IAAK;IAC7C,MAAMC,OAAO,GAAG,CACdC,MAAM,CAACP,WAAW,CAACK,QAAQ,CAAC,CAACG,OAAO,IAAI,CAAC,CAAC,EAC1CD,MAAM,CAACP,WAAW,CAACK,QAAQ,CAAC,CAACI,OAAO,IAAI,CAAC,CAAC,EAC1CF,MAAM,CAACP,WAAW,CAACK,QAAQ,CAAC,CAACK,OAAO,IAAI,CAAC,CAAC,CAC3C;IACD,MAAMC,SAAS,GAAGC,IAAI,CAACC,GAAG,CAAC,GAAGP,OAAO,CAAC,CAAC,CAAC;;IAExC,IAAI,CAACL,aAAa,CAACH,SAAS,CAACO,QAAQ,CAAC,IAAIM,SAAS,GAAGV,aAAa,CAACH,SAAS,CAACO,QAAQ,CAAC,EAAE;MACvFJ,aAAa,CAACH,SAAS,CAACO,QAAQ,CAAC,GAAGM,SAAS;IAC/C;EACF,CAAC,CAAC;EAEFxB,YAAY,CAACc,aAAa,CAAC;AAC7B,CAAC;;AAED;AACA,OAAO,MAAMa,YAAY,GAAGA,CAAA,KAAM;EAChC,MAAMC,QAAQ,GAAGtB,YAAY,CAAC,CAAC;EAC/B,OAAOsB,QAAQ,CAACjB,SAAS,IAAI,CAAC,CAAC;AACjC,CAAC;;AAED;AACA,OAAO,MAAMkB,eAAe,GAAGA,CAAA,KAAM;EACnC,MAAMD,QAAQ,GAAGtB,YAAY,CAAC,CAAC;EAC/B,IAAIwB,YAAY,GAAG,EAAE;EAErB,MAAMC,YAAY,GAAGH,QAAQ,CAAClB,OAAO,GAAGkB,QAAQ,CAAClB,OAAO,CAACsB,MAAM,GAAG,CAAC;EAEnE,IAAID,YAAY,IAAI,EAAE,EAAED,YAAY,CAACG,IAAI,CAAC,0BAA0B,CAAC;EACrE,IAAIF,YAAY,IAAI,EAAE,EAAED,YAAY,CAACG,IAAI,CAAC,0BAA0B,CAAC;EACrE,IAAIlB,MAAM,CAACC,IAAI,CAACY,QAAQ,CAACjB,SAAS,IAAI,CAAC,CAAC,CAAC,CAACqB,MAAM,IAAI,CAAC,EAAEF,YAAY,CAACG,IAAI,CAAC,wBAAwB,CAAC;EAClG,IAAIR,IAAI,CAACC,GAAG,CAAC,GAAGX,MAAM,CAACmB,MAAM,CAACN,QAAQ,CAACjB,SAAS,IAAI;IAAE,CAAC,EAAE;EAAE,CAAC,CAAC,CAAC,IAAI,GAAG,EAAEmB,YAAY,CAACG,IAAI,CAAC,kBAAkB,CAAC;EAE5G,OAAOH,YAAY;AACrB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}